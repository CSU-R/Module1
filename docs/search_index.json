[
["index.html", "R Module 1 Chapter 1 Welcome!", " R Module 1 Alex Fout1 2020-07-07 Chapter 1 Welcome! Hi, and welcome to the R Module 1 (AKA STAT 158) course at Colorado State University! This course is the first of three 1 credit courses intended to introduce the R programming language to those with little or no programming experience. Through these Modules (courses), we’ll explore how R can be used to do the following: Perform basic computations and logic, just like any other programming language Load, clean, analyze, and visualise data Run scripts Create reproducible reports so you can explain your work in a narrative form In addition, you’ll also be exposed to some aspects of the broader R community, including: R as free, open source software The RStudio free software Publicly available packages which extend the capability of R Events and community groups which advocate for the use of R and the support of R users More detail will be provided in the Course Topics laid out in the next chapter. 1.0.1 How To Navigate This Book To move quickly to different portions of the book, click on the appropriate chapter or section in the the table of contents on the left. The buttons at the top of the page allow you to show/hide the table of contents, search the book, change font settings, download a pdf or ebook copy of this book, or get hints on various sections of the book. The faint left and right arrows at the sides of each page (or bottom of the page if it’s narrow enough) allow you to step to the next/previous section. Here’s what they look like: Figure 1.1: Left and right navigation arrows Department of Statistics, Colorado State University, fout@colostate.edu↩︎ "],
["associated-csu-course.html", "1.1 Associated CSU Course", " 1.1 Associated CSU Course This bookdown book is intended to accompany the associated course at Colorado State University, but the curriculum is free for anyone to access and use. If you’re reading the PDF or EPUB version of this book, you can find the “live” version at https://csu-r.github.io/Module1/, and all of the source files for this book can be found at https://github.com/CSU-R/Module1. If you’re not taking the CSU course, you will periodically encounter instructions and references which are not relevant to you. For example, we will make reference to the Canvas website, which only CSU students enrolled in the course have access to. "],
["prelim.html", "Chapter 2 Course Preliminaries", " Chapter 2 Course Preliminaries This course is presented as a bookdown document, and is divided into chapters and sections Each week, you’ll be expected to read through the chapter and complete any associated exercises, quizzes, or assignments. 2.0.1 Special Boxes Throughout the book, you’ll encounter special boxes, each with a special meaning. Here is an example of each type of box: This box will prompt you to pause and reflect on your experience and/or learning. No feedback will be given, but this may be graded on completion. This box will signify a quiz or assignment which you will turn in for grading, on which the instructor will provide feedback. This box is for checking your understanding, to make sure you are ready for what follows. This box is for displaying/linking to videos in order to help illustrate or communicate concepts. This box will warn you of possible problems or pitfalls you may encounter! This box is to provide material going beyond the main course content, or material which will be revisited later in more depth. This box will prompt for your feedback on the organization of the course, so we can improve the material for everyone! Any of the boxes may include hyperlinks like this: I am a link or code like this This is code. 2.0.2 How This Book Displays Code In addition, you may see R code either as part of a sentence like this: 1+1, or as a separate block like so: 1+1 [1] 2 Sometimes (as in this example) we will also show the output (in yellow), that is, the result of running the R code. In this case the code 1+1 produced the output 2. If you hover over a code block with your mouse, you will see the option to copy the code to your clipboard, like this: Figure 2.1: copying code from this book This will be useful when you are asked to run code on your computer. 2.0.3 Next Steps When you’re ready, go to the next section to learn about the course syllabus and grading policies. Any feedback for this section? Click here "],
["course-topics-syllabus.html", "2.1 Course Topics &amp; Syllabus", " 2.1 Course Topics &amp; Syllabus Broadly speaking, the topics of this course are described by the Chapter Titles. Here’s what each entails: - Course Preliminaries: Introduction to R and the world of R - Installing R: Like it sounds, setting up your computer so you can work with R. - R Programming Fundamentals: The basics of programming in R, the building blocks that you need in order to do anything more interesting. - Working with Data: How to do meaningful things with data sets. Probably the most useful Chapter of the book. - Creating R Programs: More programming concepts to increase your R Power! 2.1.1 Syllabus First, some important details: Instructor: Alex Fout Office Hours: TBD on Microsoft Teams Webpages: Canvas, this textbook Course Credits: 1. Because this week lasts four weeks, this course should “feel” like a 3 credit course for four weeks. Normally this means ~3 hours of lecture and 12 hours of work outside of lecture per week. Because this course is online, there will be 1 hour or less of “lecture” (see below), and about 14 hours of outside work per week. Textbook: You’re reading it right now. The textbook will be your primary learning resource. You’ll be expected to read through the required sections, watch any relevant videos, and complete any reflections, progress checks, and assessments along the way. Prerequisites: None Progress Checks: As you work your way through the textbook, you’ll encounter purple “Progress Check” boxes. For Week 1, you’ll submit your responses directly to canvas. For weeks 2-4, you’ll fill in a R Markdown document and submit it to canvas. You’ll be provided a template to fill in as you complete the progress checks. To turn in the document, you’ll knit the document to HTML or PDF and upload to Canvas. (More details coming later in the book!). Progress checks will be graded on completion, organization, and correctness. Homework: About once per week, you’ll complete an assignment using R. Homeworks must be turned in by 11:59pm (Mountain) on the day they are due. Exams: There will be no exams in this course Quizzes: Once per week, there will be a 15 minute Canvas quiz. Quizzes must be completed by 11:59pm (Mountain) on the day they are due. Lectures: Since we aren’t having in-person lectures, we will hold short “Virtual Meetings” through MS Teams instead. These will be shorter than a traditional lecture (approximately 10-30 minutes), and the purpose will be to allow some interaction between everyone in the course and to allow the instructor to introduce any relevant topics. Grading: The grading for the course is apportioned like so: Progress Checks: 30% Homework: 40% Quizzes: 30% 2.1.2 Schedule Week Weekday Date Reading Due 1 Monday July 13 Ch1, Ch2 Progress Check 1 1 Wednesday July 15 Ch3 Quiz 1 1 Friday July 17 Ch4 Assignment 1 2 Monday July 20 Ch4 Progress Check 2 2 Wednesday July 22 Ch4 Quiz 1 2 Friday July 24 Ch5 Assignment 2 3 Monday July 27 Ch5 Progress Check 3 3 Wednesday July 29 Ch5 Quiz 1 3 Friday July 31 Ch5 Assignment 3 4 Monday August 03 Ch6 Progress Check 4 4 Wednesday August 05 Ch6 Quiz 4 4 Friday August 07 Ch6 Assignment 4 2.1.3 Course Policies Late Work: Homework and Progress Checks must be turned in on time to receive full credit. You may turn in Homework and Progress Checks up to 2 days late for up to 50% credit. Group Work: Students are welcome to discuss the course with each other, but all work you turn in must be your own. This means no sharing solutions to homework, progress checks, or quizzes. You may not work with other students on quizzes. You are welcome to seek help on Canvas discussion boards and during office hours. Students with Disabilities: The university is committed to providing support for students with disabilities. If you have an accommodation plan, please provide that to me as soon as possible so we can discuss appropriate arrangements. Growth Mindset: This phrase was coined by Carol Dweck to reflect how your learning outcomes can be affected by the way you view the learning process. To quote Dweck: “The view you adopt for yourself profoundly affects the way you lead your life… Believing that your qualities are carved in stone - the fixed mindset - creates an urgency to prove yourself over and over. If you have only a certain amount of intelligence, a certain personality, and a certain moral character — well, then you’d better prove that you have a healthy dose of them. It simply wouldn’t do to look or feel deficient in these most basic characteristics… There’s another mindset in which these traits are not simply a hand you’re dealt and have to live with, always trying to convince yourself and others that you have a royal flush when you’re secretly worried it’s a pair of tens. In this mindset, the hand you’re dealt is just the starting point for development. This growth mindset is based on the belief that your basic qualities are things you can cultivate through your efforts. Although people may differ in every which way — in their initial talents and aptitudes, interests, or temperaments — everyone can change and grow through application and experience.” Programming may be a very new, intimidating thing for you. That’s okay! View this course as a way to grow and gain new skills which you can use to do incredible and important things! Learn by doing: A wise statistics instructor once compared watching someone else solve statistics problems to watching someone else practice shooting basketball free throws. You may learn a little by watching, but at some point you won’t get any better until you try it yourself! The same can be said for programming. Reading a textbook and watching videos are a good start, but you’ll have to actually program in order to get any better! This textbook was designed to be interactive, and I encourage you to “code along with the book” as you read. 2.1.4 Grading Scale Grades will be assigned according to the following scale: Class_Score Letter_Grade 92%-100% A 90%-92% A- 88%-90% B+ 82%-88% B 80%-82% B- 78%-80% C+ 70%-78% C 60%-70% D 0%-60% F Any feedback for this section? Click here "],
["running-your-first-r-code.html", "2.2 Running your first R Code", " 2.2 Running your first R Code Enough of the boring stuff, let’s run some R code! Normally you will run R on your computer, but since you may not have R installed yet, let’s run some R code using a website first. As you run code, you’ll see some of the things R can do. In a browser, navigate to rdrr.io/snippets, where you’ll see a box that looks like this: Figure 2.2: rdrr code entry box The box comes with some code entered already, but we want to use our own code instead, so delete all the text, starting with library(ggplot2) and ending with factor(cyl)). In its place, type 1+1, then click the big green “Run” button. You should see the [1] 2 displayed below. So if you give R a math expression, it will evaluate it and give the result. Note: the “correct answer” to \\(1+1\\) is 2, but the output also displays [1], which we won’t explain until later(TODO), so you can ignore that for now. Next, delete the code you just wrote and type (or copy/paste) the following, and run it: factorial(10) The result should be a very large number, which is equivalent to \\(10!\\), that is, \\(10\\times9\\times8\\times7\\times6\\times5\\times4\\times3\\times2\\times1\\). This is an example of an R function, which we will discuss more in Section (TODO: insert ref). Aside from math, R can produce plots. Try copy/pasting the following code into the website: x &lt;- -10:10 plot(x, x^2) You should see points in a scatter plot which follow a parabola. Here’s a more complicated example, which you should copy/paste into the website and run: library(ggplot2) theme_set(theme_bw()) ggplot(mtcars, aes(y=mpg, fill=as.factor(cyl))) + geom_boxplot() + labs(title=&quot;Engine Fuel Efficiency vs. Number of Cylinders&quot;, y=&quot;MPG&quot;, fill=&quot;Cylinders&quot;) + theme(legend.position=&quot;bottom&quot;, axis.ticks.x = element_blank(), axis.text.x = element_blank()) R can be used to make many types of visualizations, which you will do more of in Section (TODO: insert ref). This may be the first time you’ve seen R, so it’s okay if you don’t understand how to read this code. We’ll talk more later about what each statement is doing, but for now, here is a brief description of some of the code above: -10:10 This creates a sequence of numbers starting from -10 and ending at 10. That is, \\(-10, -9, -8, \\ldots, 8, 9, 10\\). library This is a function which loads an R package. R packages provide extra abilities to R. Any feedback for this section? Click here "],
["getoutoftheclass.html", "2.3 What do you hope to get out of this course?", " 2.3 What do you hope to get out of this course? To close out this chapter, it would be healthy for you to reflect on what you’d like to get from this course. Take some time to think through each question below, and write down your answers. It is fine if your honest answer is I don’t know. In that case, try to come up with some possible answers that might be true. Why are you taking this course? If this course is required for your major, how do you think it is supposed to benefit you in your studes? What types of data sets related to your field of study may require data analysis? What skills do you hope to develop in this course, and how might they be applied in your major and career? Submit your answers to the above reflection to Canvas. Store your answers in a safe place, and refer to them periodically as you progress through the course. You may find that you aren’t achieving your goals and that some adjustment to how you are approaching the course may be necessary. Or you may find that your goals have changed, which is fine! Just update your goals so that you have something to refer back to. Any feedback for this section? Click here "],
["what-is-r.html", "2.4 What is R?", " 2.4 What is R? What is R? This question can be answered several different ways. Here are a few of them: Any feedback for this section? Click here 2.4.1 R is a Programming Language A programming language is a way of providing instructions to a computer. Some popular languages (in no particular order) are C, C++, Java, Python, PHP, Visual Basic, and Swift. Much like other types of languages, programming languages combine text and punctuation (syntax) to create statements which provide meaningful instructions (semantics) to be performed by a computer. These instructions are called “code”. R code can be used to do many things, but primarily R was designed to easily work with data and produce graphics. The R language can be used to use a computer to do the following: - Read and process a set of data in a file or database - Use data to compute statistics and perform statistical tests - Produce nice looking visualizations of data - Save data for others to use. But this list is just the tip of the iceberg. As you will see, R can be used to do so much more! After the instructions are written, the R code is run, that is, the code is provided to the computer, and the computer performs the instructions to produce the desired results. Many other programming languages use different syntax for the same purpose. # comments out a line in R and python % comments out a line in matlab // comments out a line in C++ and javascript Similar to learning a foreign language, learning your first programming language will make it easier to understand other similar ones. 2.4.2 R is software R can also be thought of as the software program which runs R code. In other words, if R code is the computer language, then the R software is what interprets the language and makes the computer follow the instructions laid out in the code. This is sometimes called “base R”. 2.4.3 R is Free The R software is free, so anyone can download R, write R code, and run the R code in order to produce results on their computer. 2.4.4 R is Open Source The R software, which runs R code, is also made up of a bunch of code called source code. In addition to being free, R is also open source, meaning that anyone can look at the source code and understand the “deep-down nuts-and-bolts” of how R works. In addition, anyone is able to contribute to R, in order to improve it and add new features to it. What are the advantages of open-source software? What are some potential downsides? Why do you think the creators of R decided to make it open source? 2.4.5 R is an ecosystem Another way of thinking about R is to include not only the R language and the R software, but also the community of R users and programmers, and the various “add on” software they have created for R. These add on software are called “packages”. 2.4.6 R Packages An R package is software written to extend the capabilities of base R. R packages are often written in R code, so anyone who knows how to write R code can also create R packages. The importance of packages cannot be understated. One of the reasons for the incredible popularity of R is the fact that members from the community can write new packages which enable R to do more. Sometimes packages are written to help folks in particular disciplines (e.g. psychology, geosciences, microbiology, education) do their jobs better. Other times, packages are written to extend the capability of R so that people from many disciplines can use them. R can be used to make web sites, interactive applications, dynamic reproducible reports, and even textbooks (like this one!). The inclusion of R packages, combined with the free and open source nature of R software, has led to the development of a active, diverse, and supportive community of R users who can easily share their code, data, and results with one another. skimr provides a frictionless approach to summary statistics which conforms to the principle of least surprise, displaying summary statistics the user can skim quickly to understand their data. 2.4.7 R Interfaces The R software can be run in many different places, including personal computers, remote servers, and websites (as you have seen!). R works on Windows, MAC OSX, and Linux, and R can be run using a terminal or command line (if you know what those are), or using a graphical user interface (with buttons you can click and such). By far one of the most popular ways of using R is with RStudio, which is also open free and open source software. For this course, you’ll be using RStudio. Any feedback for this section? Click here "],
["the-r-community.html", "2.5 The R Community", " 2.5 The R Community We already mentioned that there is active community of R users around the world, ranging from novice to expert level. Here is a partial list of venues where R users interact (aside from the official websites, none of these links should be considered an official endorsement): R Project: The official website for R R Project Mailing Lists: Various email lists to stay informed on R related activities. The R-announce list is a good starting point, which will keep you updated on the latest releases of the R software Twitter #rstats: Many R Users are active on Twitter and you can find them Tidy Tuesday is a weekly online project that focuses on understanding how to summarize, arrange, and make meaningful charts with open source data. You can see the projects others have done by following #tidytuesday on twitter. R-Ladies is a global group dedicated to promoting gender equality in the R community. They have an elaborate list of resources for learning and host educational and networking events. R-Podcast: A periodic podcast with practical advice for using R, and the latest R news. R-Bloggers: A blog website where authors can post examples of code, data analysis, and visualization. 2.5.1 Places to Get Help (If you’re a student taking this class for credit) Students taking the course for credit should seek help from these places, in order: Canvas Discussion boards Office Hours I will not answer homework/quiz/textbook related questions via email 2.5.2 Places to Get Help (anyone) If you find yourself stuck, there are many options available to you, here are a few: Stack Overflow is a message board where users can post questions about issues they’re having. If you search for your error, there’s likely already an answered question about it. If not, you can submit one with a reproducible example that the active community can help you with. R Manuals: With so many R resources available on the internet, sometimes information get’s “boiled down” or simplified for ease of communication. If you need the “official answer” to a question, these manuals are the place to go. Check out “An Introduction to R” for a good reference. Any feedback for this section? Click here "],
["installingr.html", "Chapter 3 Installing R", " Chapter 3 Installing R In the previous chapter, you ran R code on a website. The purpose of this chapter is to install R on your own computer, so that you can run R without needing access to the internet. "],
["computer-basics.html", "3.1 Computer Basics", " 3.1 Computer Basics If you’re new to computers, this section will be important for you to get set up. If you understand the basics of operating systems, directory structures on your computer, and downloading/installing files, then you can safely skip to the next section. Any feedback for this section? Click here 3.1.1 Operating Systems R works on Windows, Mac OS X, and several Linux-based operating systems, so if you have one of these operating systems, you’ll be able install and use R. At least, this is mostly true. Some versions of Windows that run on ARM processors cannot install R, and installing R on a Chromebook will likely be more complicated (see here). 3.1.2 Downloads and Installations To install R, you’ll have to download a file from the internet which performs the installation. After you install R, you shouldn’t have to download anything to run R. Any feedback for this section? Click here "],
["install-r-r-studio.html", "3.2 Install R &amp; R Studio", " 3.2 Install R &amp; R Studio You’ll actually be installing two separate programs, both of which are free to use. The first is the R programming language. The second is a separate program called R Studio. R Studio will be the primary way in which you interact with R in this class, we will say more about this later. Any feedback for this section? Click here 3.2.1 Installing R Installation will look slightly different depending on the operating system, but the major steps are the same. First, navigate to the CRAN Mirrors Site, which lists several locations from which R can be downloaded. Find a location near you (or not, this isn’t critical) and click on the link to be brought to the mirror site. From this point, this will change depending on your operating system. 3.2.1.1 Windows Click “Download R for Windows”, then click “base”. Finally, Click “Download R X.Y.Z for Windows”, where X, Y, and Z will be numbers. These numbers indicate which version of R you’ll be installing. As of the publishing of this book, R is on version r_version. any other settings. Your computer might prompt for the location on your computer that you would like to save the file. Select a location (reasonable options are your Downloads folder or the Desktop) and select “save”. When the download completes, find the downloaded file in the File Explorer and double click to run it. This will start the installation process. Follow the on screen prompts. For the most part you can click “continue”, “agree”, “install” as appropriate, and you don’t have to worry about changing any installation settings. Create windows R install Video 3.2.1.2 Mac OS X Click “Download R for (Mac) OS X” Click “R-X.Y.Z.pkg”, where X, Y, and Z will be numbers. These numbers indicate which version of R you’ll be installing. As of the publishing of this book, R is on version r_version. Your computer might prompt for the location on your computer that you would like to save the file. Select a location and select “save”. When the download completes, find the downloaded file in the Finder and double click to run it. This will start the installation process. Follow the on screen prompts. For the most part you can click “continue”, “agree”, “install” as appropriate, and you don’t have to worry about changing any installation settings. ?Ben? install from Mac OS X? Rstudio also offers a cloud service that allows you to work with R in your browser. We’ll use the desktop version but you can check out the interactive primers on the cloud site. 3.2.2 Installing R Studio r print(“test”) Any feedback for this section? Click here "],
["successfull-installation.html", "3.3 Successfull Installation", " 3.3 Successfull Installation TODO: add some basic tasks here to make sure R and RStudio work. (screenshots?) todo: video orienting to R Studio (Matt video?) todo: create assessment r print(“test”) Any feedback for this section? Click here Any feedback for this section? Click here "],
["running-code-in-rstudio-console.html", "3.4 Running Code in RStudio Console", " 3.4 Running Code in RStudio Console TODO: repeat online examples + Pull from here: https://geanders.github.io/RProgrammingForResearch/r-preliminaries.html R comes pre-loaded with several datasets that are used in many examples. One is a set of 150 measurements of irises from 3 species. Use mean(iris$Petal.Length) to find out what the mean petal length is. r print(“test”) Any feedback for this section? Click here Any feedback for this section? Click here "],
["workspace-setup.html", "3.5 Workspace setup", " 3.5 Workspace setup Any feedback for this section? Click here 3.5.1 Recommended Settings don’t save/load workspace how to adjust font size (in options and with ctrl +/-) dark mode! 3.5.2 Setting working directory 3.5.3 Create R Studio Project and directories for class TODO: pull from: https://geanders.github.io/RProgrammingForResearch/r-preliminaries.html#r-scripts Note: This will automatically set your working directory Folder structure: Raw Data Assignments Give me some feedback about the content in this section. "],
["reflection.html", "3.6 Reflection", " 3.6 Reflection Before moving on to the next section, take a note of all you’ve done so far. Did your R installation go smoothly? If not, could you troubleshoot the errors or find help online? Does using R remind you of other programs you have experience with? What could be some reasons that using R code written by someone else might not work on your computer? "],
["r-programming-fundamentals.html", "Chapter 4 R Programming Fundamentals ", " Chapter 4 R Programming Fundamentals "],
["programming-preliminaries.html", "4.1 Programming Preliminaries", " 4.1 Programming Preliminaries Look at a sentence in a language you don’t know, look carefully at the symbols, spacing and characters. Recall learning a foreign language, how you had to learn the syntax and grammar rules. Now think about English (or another language you know well) and think about the syntax and grammar rules that you take for granted. All human languages rely on a set of rules called grammar, which describe how the language should be used to communicate. When two humans communicate with a language, they both must agree on the the rules of that language. R also has rules that must be followed in order for a human ( you ) to communicate with a computer, in order to tell the computer what to do. In human language, grammar is often fluid and evolving, and two people may have to adapt their use of the language in order to communicate. With R, the fules are fixed, and the computer “knows” them perfectly. It is up to you to learn the rules in order to make the computer do exactly what you want it to do. Since any computer programming language will do exactly what you tell it to do, it’s important to cover some of the basic rules of the R programming language before you can learn what it can do. So let’s get started: 4.1.1 R Commands Like most programming languages, R consists of a set of commands which form the sequence of instructions which the computer completes. You can think of commands as the verbs of R, they are the actions the computer will take. Here is an example of a command, followed by the result. print(&quot;hello, world!&quot;) [1] &quot;hello, world!&quot; This command is telling R to print out a message. R code usually contains more than one command, and typically each command is put on a separate line. Here are multiple commands, each on a separate line: print(&quot;The air is fine!&quot;) print(1+1) print(4 &gt; 5) [1] &quot;The air is fine!&quot; [1] 2 [1] FALSE The first command prints another message, the second command does some math then then prints the result, and the third command evaluates whether the statement is true or false and prints the result. Generally, it’s a good idea to put separate commands on separate lines, but you can put multiple commands on the same line, as long as you separate them by a semicolon. See this code for example: x &lt;- 1+1; print(x); print(x^2) [1] 2 [1] 4 In this example, three commands are given on one line. The first command creates a new variable called x, the second command prints the value of x, and the third command prints the value of x squared. We see that the semicolon, ;, serves as the command termination, because it tells R where one command ends and another begins. When a line contains a single command, no semicolon in necessary at the end, but including a semicolon doesn’t have any effect either. print(&quot;This line doesn&#39;t have a semicolon&quot;) print(&quot;This line does have a semicolon&quot;); [1] &quot;This line doesn&#39;t have a semicolon&quot; [1] &quot;This line does have a semicolon&quot; Including multiple semicolons (e.g. print(“hello”);;) does not work! You’ve just seen your first example of assignment. That is, we created a thing called x , and assigned to it the value of 1+1 using the assignment operator, &lt;-. Formally x is called an object, but we’ll talk about that more objects and assignments later. TODO: make these code blocks display on multiple lines: So far, we’ve seen that you can place one command on one line, multiple commands on multiple lines, multiple commands on one line, so you may ask: can you can place one command on multiple lines? The answer is sometimes, depending on the command. Generally, if R is expecting the end of a command but doesn’t see one by the time it gets to the end of a line, it will continue looking on the next line. Here are some examples: 1 + 1 print(“This string is on multiple lines”) At this point, we’ve introduced several new types of R commands (assigning a variable, squaring a number, etc.), and we will talk more specifically about these later. The important part of this section is how R code is arranged into different commands Lastly, commands can be “grouped together” using left and right curly braces: { and }. Here’s an example: { print(&quot;here&#39;s some code that&#39;s all grouped together&quot;) print(2^3 - 7) w &lt;- &quot;hello&quot; print(w) } [1] &quot;here&#39;s some code that&#39;s all grouped together&quot; [1] 1 [1] &quot;hello&quot; The above grouped code is indented so that it looks nice, but it doesn’t have to be: { print(&quot;here&#39;s some code that&#39;s all grouped together&quot;) print(2^3 - 7) w &lt;- &quot;hello&quot; print(w) } [1] &quot;here&#39;s some code that&#39;s all grouped together&quot; [1] 1 [1] &quot;hello&quot; Indenting is an example of coding style, which are formatting decisions which don’t affect the results of the code, but are meant to enhance readability. We’ll talk more about coding style later. TODO: talk about style later. In some programming languages, Python for example, white space matters. That is, code indents and other spaces change the way the code runs. In R, white space does not matter, so things like indents are used purely for readability. What does it mean to “group” code? At this point there is no practical difference, each command gets executed whether or not it is grouped inside curly braces. However, code grouping will become very important later on, when we discuss control flow in section (TODO: add ref). There are several helpful shortcuts that you can use in R. If you forget to put quotes around something, you can highlight and press the quote key and it will add quotes to both sides. This works with parenthesis too. You can also use tab completion with functions and defined variables. Tab completion allows you to use the same amount of time using a longer, descriptive variable name as a short, meaningless, and easily confused one. This can save you a lot of time and reduce mistakes! In RStudio, open a new R script and type in all the R commands from this section, to verify that you get the same result. It’s good practice! 4.1.2 Comments When writing R code, you may wish to include notes which explain the code to your future self or to other humans. This can be done with comments, which are ignored by R when it is running the code. The “#” comment Here’s an example of some comments: # Let&#39;s define y and z y &lt;- 8 z &lt;- y + 5 # adding 5 to y and assigning the result to z ## This is still a comment, even though we&#39;re using two #&#39;s Notice that it’s possible for a line to contain only a comment, or for part of a line to be a comment. R decides which part of a line is a comment by looking for the first “#”, and everything after that will be treated as a comment and ignored. R ignores comments, but you should not! If you’re reading code that someone else has written, it’s likely that also paying attention to their comments will greatly help you to understand what their code is doing. It’s also courteous to make good comments in your own code, if only because you may have to return to your own code in the future and re-learn what it is doing! In this book, we will use comments to help explain the R code that you will see. 4.1.3 Blank Lines Blank lines in R are ignored, but they can be used to organize code and enhance readability: print(&quot;The sky is blue&quot;) # the blank line below here is ignored print(&quot;The grass is green&quot;) [1] &quot;The sky is blue&quot; [1] &quot;The grass is green&quot; 4.1.4 CaSe SeNsItIvItY In R, variables, functions, and other objects (all of which we’ll talk about later), have names. These names are case sensitive, so you must be careful when referencing an object by name. Here we create two variables and give them different values, notice how they are different from each other: A &lt;- 4 a &lt;- 5 print(a) print(A) [1] 5 [1] 4 This may seem obvious, but case sensitivity applies to functions (which we’ll talk about later) too. We’ve been using the print function a lot in the above examples, which begins with a lower case p. There is no Print function: Print(&quot;testing&quot;) Error in Print(&quot;testing&quot;): could not find function &quot;Print&quot; 4.1.5 ? One very nice thing in R is the documentation that accompanies it. Every function included in R (like print) has documentation that explains how that function works. To access the documentation, use a ? followed by the name of the function, like so: ?print The output of the above code chunk is not shown, because the result of this code is best viewed in RStudio. Go to R Studio and type in ?print and observe what happens! 4.1.6 ?? If you don’t remember the exact name of a function, or would like to search for general matches to a topic, then you can use ??. For example, trying ?Print produces an error, because there is not Print function (remember, R is case sensitive), so there’s no documentation to go with it. However, the following should still work: ??Print Programmers have a sense of humor, too! Try running ????print to see a small joke. Remember, comedic taste varies! TODO: put these bonus blocks in more appropriate places: This is a lot to remember, but luckily you can use a cheat sheet while you’re learning. As you get more familiar with R, you’ll begin to memorize basic funtions - and google is always there for the rest. Want to know more about R syntax? Try typing ?Syntax in the R console (then press Enter). As we’ve seen, symbols and characters have specific meaning in R. You must be careful not to ignore things like semicolons, curly braces, parentheses, when reading R code. This takes practice! Okay, now that we’ve covered some of the basics, it’s time to start learning how to do useful things in R! The next few sections will describe the different types of data that R can handle. Give me some feedback about the content in this section. Any feedback for this section? Click here "],
["data-types.html", "4.2 Data Types", " 4.2 Data Types TODO: what should this be? R can store and manipulate different pieces of information, called data, and these data can be of several different types. Here are some examples of different types of data: a &lt;- 12.34 # a is a number b &lt;- &quot;Hello&quot; # b is a string of characters c &lt;- TRUE # c is a special type of data that is either true or false R has special names for these examples, and there are other types of data as well. Below, we’ll talk about each data type, one at a time. The term “data” is actually plural! A single piece of data is called a “datum”. So to refer to a set of data, you would say “these data”, and to refer to a single piece of data, you would say “this datum”. 4.2.1 Numeric Many data exist as numbers, and R has a specific data type for storing those numbers, called the numeric data type. Here are some examples: a &lt;- -11 b &lt;- 13.37 c &lt;- 1/137 Note that integers, decimals, and fractions are all examples of numeric data in R. We can prove that these are all the same data type using the class function: class(a) [1] &quot;numeric&quot; class(b) [1] &quot;numeric&quot; class(c) [1] &quot;numeric&quot; So far, we’ve defined the a object a few different times, which is allowed! Every time we define a, R forgets the old value. Therefore we should reuse object names with caution, because it can become difficult to remember what the latest value is! When we discuss loops later, however, we will use code to automatically change the value of an object several times in order to do useful things! When you have numeric objects, you may want to perform math operations on them. R has a number of built in functions to deal with numeric data, here are some examples: print(a + b) # Add two numeric values print(b - c) # subtract two numeric values print(a * b) # multiply two numeric values print(a^3) # take the cube of a numeric value [1] 2.37 [1] 13.3627 [1] -147.07 [1] -1331 When performing math on numeric objects, R will obey order of operations, so the following two examples will give different results: a + b * c # R will perform the multiplication before the addition [1] -10.90241 (a + b) * c # R will perform the addition first, then the multiplication [1] 0.01729927 Notice that we’ve added extra spaces in the code to help you understand what’s going on. This is another example of code style, which we’ll talk more about later. Wait a second, we didn’t use the the print function just now, but R still displayed the results of the calculations! What is going on? This behavior is peculiar to something called R Markdown, which is what we used to create this book (yes, this book was creating using R! Pretty cool, huh?). If the last command given in a code block produces a result, and you don’t assign that result to anything (using &lt;-), then R will print out that result. This means we don’t always have to use the print function when we want to display R output. Notice all the decimal points? R can be very precise when performing computations. However, viewing all of the digits stored by R can be distracting and hard to read. You can show just some of the digits by using the round function: a [1] -11 round(a, 3) [1] -11 It also turns out that R stores more digits than what it shows when it prints, though we won’t go into detail on that now. TODO: talk about Inf, -Inf, and NaN? 4.2.2 Integer In general, numeric data in R are treated as if they can be any decimal number (technically, they are a double precision number, if you know what that means; if not, it’s not important right now). However, there is a way to specify that a specific numeric object is an integer, by placing an “L” at the end of it, like so: x &lt;- 20 # x will be a numeric object y &lt;- 20L # y will be an integer object class(x) [1] &quot;numeric&quot; class(y) [1] &quot;integer&quot; Integers take half of the space in a computer’s memory or hard drive, so if you are working with or storing a lot of numbers which are integers, it might make sense to declare them as integer type in R. This will make more sense when we discuss vectors later. 4.2.3 Character Not all data are numbers! R also has the capability to store strings of characters, and this is the aptly named character type (or sometimes called a character string or just string). Here are some examples: d &lt;- &quot;Hello&quot; # This string is defined with *double* quotes e &lt;- &#39;how are you?&#39; # This string is defined with *single* quotes! print(d) print(e) [1] &quot;Hello&quot; [1] &quot;how are you?&quot; Notice how we can define character strings using single quotes or double quotes, as long as we are consistent. So this is not valid: # Note the mismatched single/double quotes: f &lt;- &quot;this does not work&#39; Error: &lt;text&gt;:2:6: unexpected INCOMPLETE_STRING 1: # Note the mismatched single/double quotes: 2: f &lt;- &quot;this does not work&#39; ^ So, make sure you are consistent. However, you may see another problem with this: some strings contain quotes in them, like this: g &lt;- &#39;This won&#39;t work&#39; Error: &lt;text&gt;:1:16: unexpected symbol 1: g &lt;- &#39;This won&#39;t ^ Since single quotes are being used to define the string, they can’t be used in the string itself, because R will “think” the string is ending at the second '. One option is to change the defining quotes to be double quotes, then the single quote will be safely included in the string: g &lt;- &quot;I&#39;m happy that this works!&quot; print(g) [1] &quot;I&#39;m happy that this works!&quot; Another option is to use a backslash when using quotes inside the string, so that R “knows” the quote is part of the string and not ending the definition of the string: g &lt;- &#39;I\\&#39;ve found another way that works!&#39; print(g) [1] &quot;I&#39;ve found another way that works!&quot; Notice that when we define g we place a \\' anywhere in the string where we want a ' to be, but when printed out, we see that R has interpreted it as just a '. Notice also that we didn’t have to change the defining quotes to be double quotes in this case. The backslash is called the escape character, and it signifies that what follows it should be interpreted literally by R, and any special meaning should be ignored. Since backslash also has special meaning itself, if you want a backslash in your string, you need to use another escape character, like so: g &lt;- “here is a backslash: \\” To see a list of special characters, try typing ?Quotes into the R console Here is an important string to know about: h &lt;- &quot;&quot; # This string is empty! h is a character string with no characters, called an empty string. You can perform math on numeric data, so what can you do with strings? The answer is, quite alot, using some functions that R provides. Here are some of them: nchar(g) # This prints out the number of characters in a string [1] 34 substr(g, 6, 10) # This extracts just part of a string, using the start and stop positions you provide [1] &quot;found&quot; strsplit(g, &quot; &quot;) # This splits the string up using a specified &quot;delimiter&quot; string, a single space in this case. [[1]] [1] &quot;I&#39;ve&quot; &quot;found&quot; &quot;another&quot; &quot;way&quot; &quot;that&quot; &quot;works!&quot; When you split a string, this produces a list containing a vector of character strings. This is an example of how data can be organized in a structured way. We’ll talk more about so called data structures in the next section. paste(&quot;hello&quot;, &quot;world&quot;) # This combines multiple strings together into one string! [1] &quot;hello world&quot; Remember that you can learn more about a function using ?. Type ?paste into R and read the documentation carefully. Can you determine what the “sep” argument does? What do you think would happen if we ran the code print(“hello”, “world”, sep=“-”)? There are other ways of manipulating strings, but we’ll return to this later. 4.2.4 Logical Numeric objects can be any number, character objects can be any string of characters, but logical objects can only be two different values: True or False Logical data types are also known as “boolean” data types. Here we define some Logical objects: a &lt;- TRUE b &lt;- FALSE c &lt;- T d &lt;- F print(a) [1] TRUE print(b) [1] FALSE print(c) [1] TRUE print(d) [1] FALSE So you can see that we can define a logical object using the full name or just the first letter. Here’s how to get the “opposite” of a logical object !a [1] FALSE Logical data are the simplest type, but there are actually some clever things you can do with them. You can test whether simple mathematical expressions are true or false. # create x and y x &lt;- 3 y &lt;- 4 # check: is x less than y? (should give TRUE) x &lt; y [1] TRUE The third command is a way to check if the value of x is less than the value of y. The result of this comparison is a logical, in this case, TRUE. Here are other ways of making comparisons: x &lt;= y # check if x is less or equal to y [1] TRUE x == y # check if x is equal to y (note how you need two equals signs) [1] FALSE x &gt;= y # check if x is greater or equal to y [1] FALSE x &gt;= y # check if x is greater than y [1] FALSE Comparisons can be made using strings as well: x &lt;- &quot;Hello&quot; y &lt;- &quot;hello&quot; x == y [1] FALSE Remember that R is case sensitive, and two strings must be exactly the same to be considered equal. Of course any object (like x) will be equal to itself: x == x [1] TRUE Surprisingly, logicals can be treated as numerics, where TRUE is treated as 1 and FALSE is treated as 0. Here are some examples: TRUE + TRUE # TRUE is treated as 1 [1] 2 FALSE * 7 # FALSE is treated as 0 [1] 0 (2 &lt; 3) + (1 == 2) # What&#39;s going on here? [1] 1 The last example deserves some thought. Start with each expression in parentheses, and decide whether it will evaluate to true or false. Then remember how logicals are treated as numbers, and determine what happens when you add them together. Numeric, integer, character, and logical data types are probably the most important data types to know in R, but there are others that were not covered here. These include: complex factor raw At least one of these (factor) will be covered later, but you can find more information about the other types here In the R console, type the following R commands and observe the result x &lt;- \"5\" y &lt;- 5 z &lt;- (x == y) What data type is x? (check with R using the class function) What data type is y? What data type is z? What is the value of z, and why does this make sense? Now that we’ve discussed different types of data, we’ll now see how they can be structured together in meaningful ways. What about dates? R actually has three built-in date classes. This can be confusing at first, but libraries like lubridate make it easy to work with dates in R. Give me some feedback about the content in this section. Any feedback for this section? Click here "],
["data-structures.html", "4.3 Data Structures", " 4.3 Data Structures Imagine a grocery list, shopping list, or to-do list. That list consists of a set of items in a specified order, and the list also has a length. Why do you think it’s useful to organize these items into a list, rather than in some other fashion? Can you think of why it might be useful to store data in a list? Often, you will need to work with many related data, for example: - A sequence of measurements through time - A grid of values - A set of phone numbers In these circumstances, it would make sense to organize the data into a data structure. R provides multiple data structures, each of which are appropriate in various situations. By far the most popular data structure in R is the data frame, but in order to talk about data frames, we must talk about some simpler data structures first. 4.3.1 Vectors A vector is just an ordered set of elements (in other words, data), all of which have the same data type. Vectors can be created for the logical, numeric (double or integer), or character data types. Here’s an example of a vector: x &lt;- c(1, 2, 3) # this is a vector of numeric types print(x) [1] 1 2 3 Note that to create a vector, we use the c function, where c stands for combine. This makes sense, because we are combining three numeric objects into a numeric vector. We may determine the length of any atomic vector like so: length(x) [1] 3 The class function will tell us what type of data is stored in a vector (which makes sense, because all elements of the vector have the same data type). class(x) [1] &quot;numeric&quot; Here’s how to create logical or numeric vectors: y &lt;- c(TRUE, TRUE, FALSE, TRUE) z &lt;- c(&quot;to&quot;, &quot;be&quot;, &quot;or&quot;, &quot;not&quot;, &quot;to&quot;, &quot;be&quot;) class(y) [1] &quot;logical&quot; length(y) [1] 4 class(z) [1] &quot;character&quot; length(z) [1] 6 The above statement states that all elements of a vector must have the same data type, so what do you think will happen if you try to create a vector using elements from different data types? Here are some possibilities, can you think of another one? R will produce an error R will combine the elements somehow, but the result won’t be a vector Something else? Whatever happens, humans were behind the decision of how R should behave in this situation. If you were in charge of making this decision, what would make the most sense? Let’s try to create a vector of mixed type and see what happens. Run the following commands in R and think about the output: m &lt;- c(TRUE, “Hello”, 5) class(m) print(m) What changes did R make when creating the vector? What’s happening in the above code is an example of type conversion, which we will talk more about later. For now, remember that every element in an R vector is the same type. You can create empty vectors as placeholders, by indicating the data type and how many elements there are: empty &lt;- numeric(10) # this creates a numeric vector of length 10 This is the first instance of us using a name which is longer than a single character! This new vector is called empty. Let’s print the contents of the vector: print(empty) [1] 0 0 0 0 0 0 0 0 0 0 Even though we didn’t tell R what data to put in the vector, it put a 0 in each element. This is the default value for a new vector. Here’s how you can create new vectors of other types: empty_int &lt;- integer(45) # create integer vector with 45 elements empty_cha &lt;- character(2) # create character vector with 2 elements empty_log &lt;- logical(1000) # create logical vector with 1000 elements!! We saw that the default value for a numeric vector is 0. Use the code above to create empty integer, character, and logical vectors, then print them out to see what default values R has given to each element. Do these make sense? What happens if we create a vector of length 1? It turns out this is the same as just creating a single instance of that data type. Observe how the following are the same. a &lt;- numeric(1) # create vector of length 1 (default value is 0, right?) b &lt;- 0 # create single numeric with value 0 a == b # compare a and b to see if they are the same. [1] TRUE It turns out, you can create a vector of length 0, which contains 0 elements. This may sound odd, but can happen sometimes! However, you cannot create a vector of negative length (e.g. logical(-1) won’t work), or a fractional length (e.g. character(12.7) won’t work). 4.3.1.1 Accessing and Changing Elements After you’ve created a vector, how do you put your data in them? Here’s how you can change the value of a specific element: a &lt;- c(1, 2, 3) # create numeric vector of length 3 a[2] &lt;- 4 # change the value of the second element of a to 4 a # print the result [1] 1 4 3 See how the second element of a has changed? So you can access a specific element using square brackets: [ and ]. In fact, if you want to know the value of the third element (without changing anything), just use: a[3] # access the third element [1] 3 What do you think will be the result of the following code (hint: the result will either be TRUE or FALSE)? vec &lt;- c(4, 5, 6) # create a vector vec[3] == 6 # Remember what == does? Once you make a guess, try it in R and see if you were correct. 4.3.1.2 Working with vectors TODO: add sort/order? You can do many things with vectors that you can with single instances of each data type. Recall, you can add a number to a numeric object: a &lt;- 3 # create a numeric object a + 4 # add a number to the object. [1] 7 The same thing is possible with numeric vectors: a &lt;- c(1, 2, 3) # create a numeric vector a + 4 # add a number to EACH ELEMENT of the vector! [1] 5 6 7 This type of behavior is called elementwise behavior. That is, the operation is performed on each element separately. Here are some other elementwise operations: a - 3 [1] -2 -1 0 a * 1.5 [1] 1.5 3.0 4.5 a ^ 2 [1] 1 4 9 a == 2 [1] FALSE TRUE FALSE R has some functions which summarize the values in a vector. One such function is the sum function, which adds the values of each element in the vector: print(a) # print the elements of a as a reminder sum(a) # add all the elements of a together. [1] 1 2 3 [1] 6 Other examples of summary functions include max, min, mean, and sd. We’ll talk about these and other summary functions later. Some operations work on two vectors, as long as they are the same length: b &lt;- c(1, 0, 1) a + b [1] 2 2 4 b * a [1] 1 0 3 a ^ b [1] 1 1 3 You can even compare two vectors, and the result will be a logical vector: z &lt;- a &gt; b # compare a and b, element by element, assign the result to z z # print the value of z [1] FALSE TRUE TRUE The first logical value is the result of a[1] &lt; b[1], the second logical value is the result of a[2] &lt; b[2], etc. what operations can we perform on character vectors? Here are some examples: z == TRUE # which elements are TRUE? [1] FALSE TRUE TRUE This just produces z again (Do you see why?). Here’s how to get the logical “opposite” of z: z == FALSE [1] TRUE FALSE FALSE Or, as we saw before, we can use !, which operates on each element of z: !z [1] TRUE FALSE FALSE Remember how logical objects can be treated as numeric objects (either a 0 or 1)? If we use this with the sum function to determine how many elements are TRUE: sum(z) [1] 2 Here’s another example of using the sum function on a logical vector: sum(a == b) # how many elements do a and b have in common? [1] 1 So there are no elements where a and b are the same. Logical vectors can also be used to access all elements of a vector for which a certain condition is true. We’ll see how to do this later on. Let’s create some character vectors and explore a few things we can do with them: a &lt;- c(&quot;I&quot;, &quot;have&quot;, &quot;to&quot;, &quot;have&quot;, &quot;a&quot;, &quot;donkey&quot;) b &lt;- c(&quot;You&quot;, &quot;want&quot;, &quot;to&quot;, &quot;sell&quot;, &quot;a&quot;, &quot;donkey&quot;) First, we can do elementwise comparison (assuming equal length), just as we did for numeric vectors: a == b [1] FALSE FALSE TRUE FALSE TRUE TRUE To search for specific character strings in a character vector, you can use the grep function: grep(&quot;have&quot;, a) # search the vector a for the phrase &quot;have&quot; [1] 2 4 This result shows that the phrase “have” occurs in elements 2 and 4 of a! What if we search for a phrase that doesn’t occur? grep(&quot;raddish&quot;, a) integer(0) The result is an integer vector of length 0, meaning there are no elements that match the phrase! 4.3.1.3 Vectors of different types What if we try to perform operations between vectors of different types? This will work in some cases, but not others. Here are a few examples: a &lt;- c(1, 2, 3) b &lt;- c(&quot;I&quot;, &quot;am&quot;, &quot;sam&quot;) c &lt;- c(TRUE, TRUE, FALSE) a + b # Can you add a numeric vector to a character vector? Error in a + b: non-numeric argument to binary operator a + c # can you add a numeric vector to a logical vector? [1] 2 3 3 We see that you can’t add a numeric vector to a character vector, but you can add a numeric vector to a logical vector. Why is this? Predict whether the following are possible: Can you can multiply a character vector with a numeric vector? Can you can multiply a logical vector with a numeric vector? Check whether you are correct by creating some vectors in R and attempting to multiply them together. Can you make sense of the answer? 4.3.1.4 Special Numeric Vectors There are a few special ways of creating a numeric vector which can be very useful, so we’ll mention them here. The first way creates a sequence of all integers between a starting and ending point: d &lt;- 1:5 # create sequence starting at 1 and ending at 5 d [1] 1 2 3 4 5 Here’s a longer example: d &lt;- 1:100 # create sequence starting at 1 and ending at 5 d [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 [91] 91 92 93 94 95 96 97 98 99 100 In this example, the R output can’t be shown on a single line, so it must be placed on multiple lines. Notice that each line has a different number in brackets: [1], [19], [37] etc. This number indicates which element of the vector is the start of that line. So we finally have an explanation for the [1] which is displayed with all R output. It’s simply indicating that this is the first element of the output. This also reflects the fact stated earlier that any R object can be considered a vector of length 1! When you’re working with large data sets, it’s often helpful to see just the first few results instead of printing the entire thing. You can use head() to print the first six rows. Another way to create a numeric vector is using the seq function, which allows you to specify the interval between each vector element. For example: e &lt;- seq(2, 100, 2) e [1] 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 [20] 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 [39] 78 80 82 84 86 88 90 92 94 96 98 100 Or you can also specify how long you want the vector to be, and seq will determine the appropriate interval to make the elements evenly spaced. seq(1, 10, length.out=3) [1] 1.0 5.5 10.0 seq(1, 10, length.out=5) [1] 1.00 3.25 5.50 7.75 10.00 4.3.1.5 Another Data Type: Factor In the previous section, we avoided talking about the factor data type, because we need the concept of vectors to appreciate their purpose, but now we are equipped to talk about them. Consider the following example of a character vector: cha_vec &lt;- c(&quot;cheese&quot;, &quot;crackers&quot;, &quot;cheese&quot;, &quot;crackers&quot;, &quot;cheese&quot;, &quot;crackers&quot;, &quot;cheese&quot;) There are seven elements in this vector (length(cha_vec) is 7), but there are only two unique elements, “cheese” and “crackers”. Imagine having two write down this vector on a piece of paper, and the space it would take. Now imagine writing down instead: 1, 2, 1, 2, 1, 2, 1 1 = “cheese” 2 = “crackers” This second method writes down numbers instead of character strings, but also keeps a record of which numbers correspond to which character strings. The total amount of space taken up on the piece of paper is smaller for the second method, and the amount of space saved would be even larger if the character vector were longer and had more repeated elements. This is the essence of what a factor data type is: A character vector stored more efficiently on the computer. For a factor vector, R stores an integer vector (which often takes less space than a character vector), and also maintains a “lookup table” which keeps track of which integers correspond with which character strings. To illustrate, let’s create a factor variable: # create a new factor variable from our existing character vector: fac_vec &lt;- factor(cha_vec) Notice how we started with a character vector and used the factor function to create a factor from it. If we print the new vector, fac_vec [1] cheese crackers cheese crackers cheese crackers cheese Levels: cheese crackers it displays the elements as we would expect, but also includes another line of output giving Levels. This shows that there are only two unique character strings, which are called factor levels. Since R is using integers “behind the scenes” to store the vector, we can see those integers by using the as.integer function: as.integer(fac_vec) [1] 1 2 1 2 1 2 1 This is another example of type conversion, which we will discuss soon. In some situations, numbers may get treated as characters, like so: x &lt;- c(“4”, “5”, “6”) This may pose an issue if this character vector gets converted to a factor, because the “behind the scenes” integers may not agree with the Levels, which represent the original data. This can easily happen when reading in data from a file on your computer, if you’re not careful. We’ll talk more about this later. There are a few neat things you can do with factor vectors. By changing the levels, you can quickly change all occurrences of a string at once. For example: print(fac_vec) levels(fac_vec) &lt;- c(&quot;peas&quot;, &quot;carrots&quot;) # change the levels of fac_vec fac_vec [1] cheese crackers cheese crackers cheese crackers cheese Levels: cheese crackers [1] peas carrots peas carrots peas carrots peas Levels: peas carrots There is more to be said about factors, but this is all we will explore at this point. In newer versions of R, all strings are treated like factors behind the scenes, meaning there’s really no difference between factor and character types in terms of how much space they take up in the computer’s memory. However, R still treats the two types differently, so it’s important to remember that they are different! 4.3.1.6 Combining Vectors Given two vectors, it’s easy to combine them into one vector: a &lt;- c(1, 2, 3) b &lt;- c(4, 5, 6, 7) c(a, b) # combine vectors a and b [1] 1 2 3 4 5 6 7 The combine function (c) is smart enough to recognize that a and b are vectors, and performs concatenation to create the resultant longer vector. You can also use the combine function to add a single element to the end of a vector: a &lt;- c(&quot;CEO&quot;, &quot;CFO&quot;) # initialize a &lt;- c(a, &quot;CTO&quot;) # redefine a by combining a with a new element a [1] &quot;CEO&quot; &quot;CFO&quot; &quot;CTO&quot; In R, there may sometimes be more than one way to do the same thing, and one of the ways might be much faster or take much less computer memory to do. In other words, two sets of R commands be correct, but one may perform better than the other. Writing “performant” (high performance) code is an advanced topic that we will not discuss much in this introductory course. You’ve just seen one way to add an element to the end of a vector, but if you do this a lot (perhaps in a for loop, which we’ll talk about later), it can be very slow. In this situation you’re better off creating the whole vector at once and updating each element as needed. What if you try to combine vectors of different types? a &lt;- c(1, 2, 3) b &lt;- c(&quot;four&quot;, &quot;five&quot;) c(a, b) [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;four&quot; &quot;five&quot; Again, we see that the c function has converted all elements to be character strings, and the resultant vector is a character vector. Since we’ve seen type conversion arise a few times now, it’s appropriate to talk more explicitly about how it works. We’ll do that in the next section. 4.3.1.7 Type conversion There may be times when you’d like to convert from one type of data into another. An example would be the character string \"1\", which R does not view as a number. Therefore, the following does not work: &quot;1&quot; + &quot;2&quot; # R can&#39;t add two character string Error in &quot;1&quot; + &quot;2&quot;: non-numeric argument to binary operator To remedy issues like this, R provides functions in order to convert from one data type into another: - as.character: converts to character - as.numeric: converts to numeric - as.logical: converts to logical - as.factor: converts to factor Using these functions, R will “do its best” to convert whatever you start with into the desired data type, but it’s not always possible to make the conversion. Below are a few examples which do and don’t work well. Converting from a numeric to a character vector is always possible: x &lt;- c(3, 2, 1) y &lt;- as.character(x) # Here&#39;s how to convert to a character vector print(x) print(y) [1] 3 2 1 [1] &quot;3&quot; &quot;2&quot; &quot;1&quot; However, converting from a character vector to a numeric only works if the characters represent numbers. Any element that won’t convert will be given w &lt;- c(&quot;1&quot;, &quot;12.3&quot;, &quot;-5&quot;, &quot;22&quot;) # this character vector can be converted to numeric as.numeric(w) [1] 1.0 12.3 -5.0 22.0 v &lt;- c(&quot;frank&quot;, &quot;went&quot;, &quot;to&quot;, &quot;mars&quot;) # this character vector can&#39;t be converted to numeric as.numeric(v) Warning: NAs introduced by coercion [1] NA NA NA NA None of the elements can be converted into a number, so R prints a warning message, and the result is an NA in each element, which stands for “not available”. NA indicates that a value is missing, and can arise in many different ways, which we will not explain here. NA values have interesting behavior in R. Generally, anything that “touches” an NA becomes an NA. You can try out these commands for yourself to see what happens: NA * 0 NA - NA c(NA, 1, 2) If only part of a vector can be converted, then the result will contain some converted values and some NA’s: u &lt;- c(&quot;1.2&quot;, &quot;chicken&quot;, &quot;33&quot;) as.numeric(u) Warning: NAs introduced by coercion [1] 1.2 NA 33.0 What other conversions are possible? Character vectors can also be converted into logical: s &lt;- c(&quot;TRUE&quot;, &quot;FALSE&quot;, &quot;T&quot;, &quot;F&quot;, &quot;cat&quot;) # all but the last element can be converted to logical as.logical(s) [1] TRUE FALSE TRUE FALSE NA Based on the examples we’ve seen before, it should make sense that numeric vectors containing 0 or 1 can also be converted into a logical vector: as.logical(c(1, 0, 1, 0)) # here we create the vector and convert it in the same line [1] TRUE FALSE TRUE FALSE Logical vectors can also be converted into character or numeric vectors. Based on what you know, make a prediction about what the following commands will produce: as.numeric(c(T, F, F, T)) as.character(c(T, F, F, T)) Check your predictions by typing running the commands in R. Remember that “solo” objects are just vectors of length 1, so any of these type conversions should work on a single object as well, like so: as.numeric(&quot;99&quot;) [1] 99 Along with the conversion functions as...., there are companion functions which simply check whether a vector is of a certain type: is.character: checks if character is.numeric: checks if numeric is.logical: checks if logical is.factor: checks if factor Here are some examples: a &lt;- c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;) is.character(a) [1] TRUE is.numeric(a) [1] FALSE a &lt;- as.numeric(a) is.character(a) [1] FALSE is.numeric(a) [1] TRUE As we’ve seen, type conversion is sometimes performed automatically, specifically when using the combine function (c). To understand more about this, try typing ?c to bring up the documentation, and have a look at the “Details” section. TODO: include conversion b/t character vec and factor vec. 4.3.2 Matrices Not all data can be arraned as an ordered set of elements, so R has other data structures besides vectors. Another data type is the matrix, which can be thought of as a grid of numbers. Here’s an example of creating a grid: data &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9) A &lt;- matrix(data, 3, 3) A [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 Here we’ve made a matrix with three rows and columns, by first creating a vector called `data'', and using thematrix` function and giving it the data, the number of rows, and the number of columns. Notice that R fills the matrix one column at a time, from left to right. Here’s how you access the data within a matrix: A[1,1] # Get the first element of the first row [1] 1 A[2,3] # Get the third element of the second row [1] 8 A[1,] # Get the entire first row [1] 1 4 7 A[,3] # Get the entire third column [1] 7 8 9 Just like with vectors, square brackets must be used to access the elements of a matrix. Don’t use parentheses like this: A(1,2). diag(A) # get the diagonal elements of A [1] 1 5 9 You can get the shape of a matrix with the dim function: dim(A) # how many rows &amp; columns does A have? [1] 3 3 Which gives an integer vector tellins us A has three rows and three columns. In R, create the matrix A above, and write code to compute the first element of the second row times the third element of the third row. You can do some simple math with matrices, like this: A + 1 # Add a number to each element of the matrix [,1] [,2] [,3] [1,] 2 5 8 [2,] 3 6 9 [3,] 4 7 10 A * 2 # Multiply each element by a number [,1] [,2] [,3] [1,] 2 8 14 [2,] 4 10 16 [3,] 6 12 18 A ^ 2 # Square each element [,1] [,2] [,3] [1,] 1 16 49 [2,] 4 25 64 [3,] 9 36 81 If you’ve worked with matrices in a math class, you may have talked about some of the following operations: Here we can find the transpose of a matrix (the rows become columns and the columns become rows): t(A) # find the transpose [,1] [,2] [,3] [1,] 1 2 3 [2,] 4 5 6 [3,] 7 8 9 # Find the trace: sum(diag(A)) # get the diagonal elements of A, then sum them. [1] 15 Here are some things you can do with two matrices: B &lt;- matrix(1, 3, 3) # create a 3x3 matrix of all 1&#39;s (notice how we only need one 1?) A + B # Add two matrices together [,1] [,2] [,3] [1,] 2 5 8 [2,] 3 6 9 [3,] 4 7 10 A * B # multiply the elements of A together [,1] [,2] [,3] [1,] 1 4 7 [2,] 2 5 8 [3,] 3 6 9 A %*% B # Perform matrix multiplication between A and B [,1] [,2] [,3] [1,] 12 12 12 [2,] 15 15 15 [3,] 18 18 18 Notice the difference between the last two examples? Just using * multiplies the matching elements of A and B together, while the new operator %*% performs matrix multiplication, like you may have seen in a linear algebra class. In R, perform matrix multiplication between A and the transpose of A. If two matrices don’t have the same shape, you won’t be able to add their elements together: C &lt;- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 3, 4) A * C Error in A * C: non-conformable arrays The error message: non-conformable arrays tells us that A and C have different shapes, so it’s impossible to multiply their matching elements together. But you can still perform matrix multiplication between them: A %*% C [,1] [,2] [,3] [,4] [1,] 30 66 102 138 [2,] 36 81 126 171 [3,] 42 96 150 204 Any data type (numeric, character, etc.) can be represented as a vector, but matrices only work with numeric types. A matrix is just a special case of a data structure called an array. Matrices have two dimensions (row and column), and arrays can have any number of dimensions (1, 2, 3, 4, 5, etc.). We won’t discuss arrays in this course much. Try running the following code in R, which should produce an error message: data &lt;- c(4.5, 6.1, 3.3, 2.0) A &lt;- matrix(data, 2, 3) Read the error message and the code carefully, and see if you can figure out the problem. What change would you make to the above code so that it runs? Remember everything inside a vector must have the _same data type_. Here we&#39;ve seen that matrices _all have to be numeric data types_. Wouldn&#39;t it be nice if there were a way to store objects of different types (without doing type conversion)? This is what lists can do! ### Lists &lt;div class=&quot;bonus&quot;&gt; &lt;p&gt;&lt;a href=&quot;https://purrr.tidyverse.org/&quot;&gt;purrr&lt;/a&gt; is a very useful library for working with lists.&lt;/p&gt; &lt;/div&gt; A List is an ordered set of _components_. This may sound similar to a vector, but the important difference is that with lists there is no requirement that the components have the same data type. Here is an example of a list: ```{.r .chunk-style} A &lt;- list(42, &quot;chicken&quot;, TRUE) A [[1]] [1] 42 [[2]] [1] &quot;chicken&quot; [[3]] [1] TRUE Here we see each component of the list printed in order, with [[1]], [[2]], and [[3]] indicating the first, second, and third components. To access just one of the components, use double square brackets ([[ and ]]): # Get the second component of A A[[2]] [1] &quot;chicken&quot; Notice that each component of A is a different data type (numeric, character, boolean), which is not a problem for lists. Nothing was converted automatically, as we saw happen with vectors. Here’s how to add a component to an existing list: A[[4]] &lt;- matrix(c(1, 2, 3, 4, 5, 6), 2, 3) Notice how we accessed component 4, which didn’t exist yet, and assigned it a value. We actually added a matrix as the fourth component, this is not possible with vectors! Now A has four components: A [[1]] [1] 42 [[2]] [1] &quot;chicken&quot; [[3]] [1] TRUE [[4]] [,1] [,2] [,3] [1,] 1 3 5 [2,] 2 4 6 Lists can even contain other lists! If you try to assign a list to be one of its own components (e.g. A[[5]] &lt;- A), then R will make a copy of A and assign the copy to be one of the components of A. Thus there is no “self reference”, and no issue with Russel’s Paradox. So far we’ve seen vectors, lists, matrices, and arrays. How are they different and how are they similar? Give me some feedback about the content in this section. List components can also have names. Here we add an component with a name: A[[&quot;color&quot;]] &lt;- &quot;yellow&quot; Notice how this new component displays differently? Instead of showing [[5]], the component is labeled with a dollar sign, then its name: $color. You can access components using their name in two ways: A[[&quot;color&quot;]] # use double square brackets to access a named element [1] &quot;yellow&quot; A$color # use dollar sign to access a named element [1] &quot;yellow&quot; But the color component is also the fifth component of the list, so we can access it like this as well: A[[5]] [1] &quot;yellow&quot; Here’s a new list created by giving names to each element: person &lt;- list(name = &quot;Millard Fillmore&quot;, occupation = &quot;President&quot;, birth_year=1800) person $name [1] &quot;Millard Fillmore&quot; $occupation [1] &quot;President&quot; $birth_year [1] 1800 Below is some R code: C$year &lt;- A[2,2] + B[[“age”]] Assuming this code works, what are the data types are A, B, and C? 4.3.2.1 Lists and Vectors Lists and Vectors are different data types, but in some ways they behave the same: Find the length of a list: length(person) # same for vectors and lists! [1] 3 Combine two lists: c(A, person) # same for vectors and lists! [[1]] [1] 42 [[2]] [1] &quot;chicken&quot; [[3]] [1] TRUE [[4]] [,1] [,2] [,3] [1,] 1 3 5 [2,] 2 4 6 $color [1] &quot;yellow&quot; $name [1] &quot;Millard Fillmore&quot; $occupation [1] &quot;President&quot; $birth_year [1] 1800 A == &quot;chicken&quot; # compare against a character color FALSE TRUE FALSE FALSE FALSE However, there are some things that vectors can do that lists can’t: A + 1 # Add a number to each component (won&#39;t work) Error in A + 1: non-numeric argument to binary operator A == T # compare against a logical (won&#39;t work) Error in eval(expr, envir, enclos): &#39;list&#39; object cannot be coerced to type &#39;logical&#39; A == 12 # compare against a numeric (won&#39;t work) Error in eval(expr, envir, enclos): &#39;list&#39; object cannot be coerced to type &#39;double&#39; So there are trade-offs when deciding whether a list or a vector is most appropriate. 4.3.2.2 Lists of Vectors Certain types of lists show up all the time in R, lists of vectors: vec_1 &lt;- c(&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;) vec_2 &lt;- c(99.4, 87.6, 22.1) vec_3 &lt;- c(&quot;F&quot;, &quot;M&quot;, &quot;M&quot;) special_list &lt;- list(name=vec_1, grade=vec_2, sex=vec_3) special_list $name [1] &quot;Alice&quot; &quot;Bob&quot; &quot;Charlie&quot; $grade [1] 99.4 87.6 22.1 $sex [1] &quot;F&quot; &quot;M&quot; &quot;M&quot; Here, each list stores a different piece of information about several people. Here’s another example: rocks &lt;- list(specimen=c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), type=c(&quot;igneous&quot;, &quot;metamorphic&quot;, &quot;sedimentary&quot;), weight=c(21.2, 56.7, 3.8), age=c(120, 10000, 5000000) ) rocks $specimen [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; $type [1] &quot;igneous&quot; &quot;metamorphic&quot; &quot;sedimentary&quot; $weight [1] 21.2 56.7 3.8 $age [1] 120 10000 5000000 When defining the rocks list, we’ve spread the command accross multiple lines for clarity. The commas at the end of some of the lines indicate that the list has more components, so R will continue reading the next line until it finds the closing parenthesis, ’. There are so many sets of data that fit into this pattern, that R has a special data type called a data frame, which we will discuss in the next section. Create a matrix, a character vector, and a boolean object, then place them all in a new list called “my_list”, with the names “my_matrix”, “my_vector”, and “my_boolean”. 4.3.3 Data Frames At their core, data frames are just lists of vectors, but they also have some extra features as well. Here, we’ll re-define the rocks list from the previous section, but this time we’ll create it as a data frame: rocks &lt;- data.frame(type=c(&quot;igneous&quot;, &quot;metamorphic&quot;, &quot;sedimentary&quot;), weight=c(21.2, 56.7, 3.8), age=c(120, 10000, 5000000)) rocks # we&#39;ll add the specimen names later Now when R display rocks, it arranges the data in rows and columns, similar to how it displays matrices. Unlike matrices, however, columns can have non-numeric data! Remember that a data frame is basically a list of vectors, so even though it can contain different types of data (because it is a list), each column is a vector, which means each column must have all elements of the same type. The names of the columns are the names of the components of rocks, and the rows contain the data from each component vector. Remember that a data frame is basically a list of vectors, so we can access a component by its position or name: rocks[[1]] [1] &quot;igneous&quot; &quot;metamorphic&quot; &quot;sedimentary&quot; rocks$weight [1] 21.2 56.7 3.8 However, we can also access a data frame as if it were a matrix: rocks[1,3] # get the datum from the first row, third column. [1] 120 rocks[1,] # get the first row, this gives another data frame with a single row. rocks[,2] # get the second column, this gives a vector. [1] 21.2 56.7 3.8 Here’s how to get the shape of a data frame (number of rows and columns): dim(rocks) [1] 3 3 If we start with a list of vectors, we can convert it to a data frame with as.data.frame: people &lt;- list(name=c(&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;), grade=c(99.4, 87.6, 22.1), sex=c(&quot;F&quot;, &quot;M&quot;, &quot;M&quot;)) as.data.frame(people) R comes with pre loaded with several data frames, such as mtcars, which contains data from the 1974 Motor Trend Magazine for 32 different automobiles: mtcars A list of included data sets in R can be found by running data(). Look at the column of car names on the left side of the mtcars data frame. It doesn’t have a column name (like mpg, cyl, etc.), because it’s not actually a column. These are row names, and you can access them like this: row.names(mtcars) [1] &quot;Mazda RX4&quot; &quot;Mazda RX4 Wag&quot; &quot;Datsun 710&quot; [4] &quot;Hornet 4 Drive&quot; &quot;Hornet Sportabout&quot; &quot;Valiant&quot; [7] &quot;Duster 360&quot; &quot;Merc 240D&quot; &quot;Merc 230&quot; [10] &quot;Merc 280&quot; &quot;Merc 280C&quot; &quot;Merc 450SE&quot; [13] &quot;Merc 450SL&quot; &quot;Merc 450SLC&quot; &quot;Cadillac Fleetwood&quot; [16] &quot;Lincoln Continental&quot; &quot;Chrysler Imperial&quot; &quot;Fiat 128&quot; [19] &quot;Honda Civic&quot; &quot;Toyota Corolla&quot; &quot;Toyota Corona&quot; [22] &quot;Dodge Challenger&quot; &quot;AMC Javelin&quot; &quot;Camaro Z28&quot; [25] &quot;Pontiac Firebird&quot; &quot;Fiat X1-9&quot; &quot;Porsche 914-2&quot; [28] &quot;Lotus Europa&quot; &quot;Ford Pantera L&quot; &quot;Ferrari Dino&quot; [31] &quot;Maserati Bora&quot; &quot;Volvo 142E&quot; You can also access the column names like this: names(mtcars) [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; &quot;vs&quot; &quot;am&quot; &quot;gear&quot; [11] &quot;carb&quot; These are two examples of attributes, which are like extra information which are attached to an object. We’ll discuss attributes more later when we discuss R objects. The column names and row names are just vectors, and you can access / modify them as such: row.names(rocks) &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) rocks names(rocks)[[1]] &lt;- &quot;rock type&quot; rocks Row and column names are allowed to have spaces in them, but you must be careful how you access them. The following code will not work: rocks\\(rock type&lt;/code&gt; , because R will stop looking for the name you are referencing once it encounters a space. To access this column, you must enclose the reference in “backticks” ( &lt;code&gt;`&lt;/code&gt; ) like so: &lt;code&gt;rocks\\)rock type. Look at the set of available data sets in R, and pick 2 data sets. For each data set, answer the following questions: What are the column names? What are the row names? What is the data type for each column? How many rows are in the data frame? How many columns are in the data frame? Any feedback for this section? Click here "],
["r-objects.html", "4.4 R Objects", " 4.4 R Objects Wherever you are right now, look around your environment. Pick an object and study its attributes. It probably has a shape, a color, a weight, and many other ways of describing it. Now pick another object, and note how it is different than the first in terms of its attributes. What does the word “object” really mean? It’s often easier to give examples than to give a precise definition, but generally objects are “things you can do things with”. That is, you can usually look at them, touch them, smell them, and move them around (when appropriate/possible, of course!). Another useful definition is that objects are nouns. Different objects have different purposes and attributes. Many of these ideas will be true for R objects as well. We’ve already introduced the concepts of objects in R in passing, but here we briefly focus on what they are and how to work with them. 4.4.1 Everything is an object in R What exactly is an object in R? As in real life, it can be difficult to give a definition, but easier to give examples. Here are some examples of objects in R: A numeric variable A vector A matrix A list A data frame A function This list is not exhaustive, but most objects we deal with will look like one of these. In many programming languages, functions are handled differently from other types of objects (i.e. they are not “first class” objects). In R, they are treated the same as any other type of object. You can assign them to variables, pass them to other functions, and can be returned from a function. This is similar to the behavior of Java and Python, but different from C. 4.4.2 Assigning Objects Any object can be assigned to a variable, as we’ve been doing already. Here’s an example: a &lt;- &quot;pink pineapple&quot; The &lt;- is called an assignment operator. This is the most common way of assigning objects in R, but there are others. Sometimes you may see: a = &quot;pink pineapple&quot; which in most cases, has the exact same effect as using the &lt;-, but in a few instances, it has a different effect. Our recommendation is to always use &lt;- when making object assignments. There are other assignment operators as well, &lt;&lt;-, -&gt;&gt;, and &lt;-, but we will not discuss these. You can find out more with the command ?assignOps. One neat thing you can do is assign multiple variables at the same time: a &lt;- b &lt;- &quot;Hello&quot; a [1] &quot;Hello&quot; b [1] &quot;Hello&quot; Even though a and b were assigned at the same time, they are still different! So if you change a with a &lt;- “goodbye”, then the value of b will still be “Hello”. 4.4.3 Attributes Every object in R has attributes, extra information that’s “attached” to the object. Every object has a length attribute: a &lt;- c(1, 2, 3, 4) b &lt;- c(&quot;bonjour&quot;, &quot;au revoir&quot;) length(a) [1] 4 length(b) [1] 2 Every object has a length. Try creating an example of the following and examining the length: 1. A boolean vector with 5 elements 1. A matrix with two rows and two columns 1. A list with two objects in it. Every R object has a mode as well, which tells you what type of object you have. Here are some examples: mode(a) [1] &quot;numeric&quot; mode(b) [1] &quot;character&quot; Every object has a length. Try creating an example of the following and examining the mode: 1. A boolean vector with 5 elements 1. A 2 x 2 matrix 1. The mtcars dataframe Aside from these two attributes, you can list all attributes of an object like this: attributes(mtcars) $names [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; &quot;vs&quot; &quot;am&quot; &quot;gear&quot; [11] &quot;carb&quot; $row.names [1] &quot;Mazda RX4&quot; &quot;Mazda RX4 Wag&quot; &quot;Datsun 710&quot; [4] &quot;Hornet 4 Drive&quot; &quot;Hornet Sportabout&quot; &quot;Valiant&quot; [7] &quot;Duster 360&quot; &quot;Merc 240D&quot; &quot;Merc 230&quot; [10] &quot;Merc 280&quot; &quot;Merc 280C&quot; &quot;Merc 450SE&quot; [13] &quot;Merc 450SL&quot; &quot;Merc 450SLC&quot; &quot;Cadillac Fleetwood&quot; [16] &quot;Lincoln Continental&quot; &quot;Chrysler Imperial&quot; &quot;Fiat 128&quot; [19] &quot;Honda Civic&quot; &quot;Toyota Corolla&quot; &quot;Toyota Corona&quot; [22] &quot;Dodge Challenger&quot; &quot;AMC Javelin&quot; &quot;Camaro Z28&quot; [25] &quot;Pontiac Firebird&quot; &quot;Fiat X1-9&quot; &quot;Porsche 914-2&quot; [28] &quot;Lotus Europa&quot; &quot;Ford Pantera L&quot; &quot;Ferrari Dino&quot; [31] &quot;Maserati Bora&quot; &quot;Volvo 142E&quot; $class [1] &quot;data.frame&quot; To access a specific attribute of an object, you can use the dollar sign ($): attr(mtcars, &quot;class&quot;) # get the class attribute for the mtcars dataframe [1] &quot;data.frame&quot; 4.4.4 Null Objects There is a special object called the NULL object, which is really just represents “nothing”. It’s used mainly if you want to remove an element from a list: a &lt;- list(1, 2, 3) a[[2]] &lt;- NULL # replace component 2 with &quot;nothing&quot; a [[1]] [1] 1 [[2]] [1] 3 Or if a function is supposed to return but doesn’t have an object to return (more on this later when we discuss functions). Give me some feedback about the content in this section. Any feedback for this section? Click here "],
["working-with-data.html", "Chapter 5 Working with Data ", " Chapter 5 Working with Data "],
["loading-saving-data.html", "5.1 Loading / Saving Data", " 5.1 Loading / Saving Data 5.1.1 “Taster”(?) list of file forms and sources 5.1.2 reading/writing csv 5.1.3 Best practices principles of Tidy Data (wickham 2014) raw data as read only Give me some feedback about the content in this section. "],
["downloading-and-saving.html", "5.2 Downloading and Saving", " 5.2 Downloading and Saving downloading and saving example csv from canvas or website Give me some feedback about the content in this section. "],
["working-with-data-1.html", "5.3 Working With Data", " 5.3 Working With Data 5.3.1 Basic indexing matrices: can use single index nested indexing: [[1]][3] 5.3.2 Advanced indexing dplyr example Give me some feedback about the content in this section. 5.3.3 Summarizing vectors Mean, std, etc. 5.3.4 Summarizing matrices 5.3.5 Summarizing vectors 5.3.6 Basic Plotting ggplot example Remember to pay close attention to the syntax when using ggplot. R won’t work if parenthesis or quotes are not paired. If you’re adding multiple layers, put each on a new line. Adding structure to make your code more readable is like doing your future self a favor (and anyone reading your code). "],
["practice.html", "5.4 Practice", " 5.4 Practice asdf "],
["creating-r-programs.html", "Chapter 6 Creating R Programs ", " Chapter 6 Creating R Programs "],
["basic-control-flow.html", "6.1 Basic Control Flow", " 6.1 Basic Control Flow If/else loops (for, while) switch Give me some feedback about the content in this section. "],
["advanced-control-flow.html", "6.2 Advanced Control Flow", " 6.2 Advanced Control Flow *apply family Give me some feedback about the content in this section. "],
["writing-functions.html", "6.3 Writing FUnctions", " 6.3 Writing FUnctions Function scope When writing functions, it helps to start simple. It’s easy to make a complicated function, but when you try to put it into use and it doesn’t work, debugging the issue can be equally complicated. Pass by value, contrast with other languages Give me some feedback about the content in this section. caution: use “=” when mapping named arguments, not &lt;-. "],
["working-with-popular-packages.html", "6.4 Working With Popular Packages", " 6.4 Working With Popular Packages Give me some feedback about the content in this section. "],
["assignment.html", "6.5 Assignment", " 6.5 Assignment Make R Markdown PDF that covers most/all of CH4: read in data, do basic things with it. "]
]
